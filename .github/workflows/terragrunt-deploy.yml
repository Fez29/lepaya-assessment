name: Terragrunt Deploy

on:
  pull_request:
    branches:
      - main
  push:
    branches:
      - 'features/**'

jobs:
  deploy:
    runs-on: ubuntu-latest
    #if: (github.event.pull_request.base.ref == 'test-github-action' && github.event.pull_request.action == 'opened') || (github.event.action == 'closed' && github.event.pull_request.base.ref == 'main')
    steps:
    - name: Checkout Repository
      uses: actions/checkout@v2

    - name: Set Environment Variables Based on Branch
      run: |
        BRANCH_NAME=${{ github.event.pull_request.head.ref }}
        environment_value=""
        AWS_ACCESS_KEY=""
        AWS_SECRET_ACCESS_KEY=""
        if [[ "$BRANCH_NAME" == "main" ]]; then
          echo "environment_value=production" >> $GITHUB_ENV
          echo "AWS_ACCESS_KEY=${{ secrets.AWS_ACCESS_KEY_STAGING }}" >> $GITHUB_ENV
          echo "AWS_SECRET_ACCESS_KEY=${{ secrets.AWS_SECRET_ACCESS_KEY_STAGING }}" >> $GITHUB_ENV
        else
          echo "environment_value=staging" >> $GITHUB_ENV
          echo "AWS_ACCESS_KEY=${{ secrets.AWS_ACCESS_KEY_PRODUCTION }}" >> $GITHUB_ENV
          echo "AWS_SECRET_ACCESS_KEY=${{ secrets.AWS_SECRET_ACCESS_KEY_PRODUCTION }}" >> $GITHUB_ENV
        fi
    
    - name: Configure AWS Credentials Action For GitHub Actions
      uses: aws-actions/configure-aws-credentials@v2
      with:
        aws-access-key-id: ${{ env.AWS_ACCESS_KEY }}
        aws-secret-access-key: ${{ env.AWS_SECRET_ACCESS_KEY }}
        aws-region: eu-central-1

    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v1
      with:
        terraform_version: 1.3.2

    - name: Setup Terragrunt
      run: |
        wget https://github.com/gruntwork-io/terragrunt/releases/download/v0.32.0/terragrunt_linux_amd64
        chmod +x terragrunt_linux_amd64
        sudo mv terragrunt_linux_amd64 /usr/local/bin/terragrunt

    - name: Set up Python
      uses: actions/setup-python@v2
      with:
        python-version: 3.9

    - name: Install pip
      run: |
        python -m ensurepip --upgrade
        python -m pip install --upgrade pip

    - name: Prepare Lambda for deployment
      working-directory: ${{ github.workspace }}
      run: |
        make prepare-lambda

    - name: Use Environment Variable
      run: |
        echo "Variable value is: ${{ env.environment_value }}"

    - name: Deploy Infrastructure with Terragrunt
      working-directory: ${{ github.workspace }}/deployment/${{ env.environment_value }}
      run: |
        terragrunt init
        terragrunt apply -auto-approve
